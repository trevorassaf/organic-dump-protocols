// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sheetfaced.proto

#include "sheetfaced.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace message {
class MotionDetectionEventDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MotionDetectionEvent> _instance;
} _MotionDetectionEvent_default_instance_;
class SetMotionDetectionConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetMotionDetectionConfig> _instance;
} _SetMotionDetectionConfig_default_instance_;
class PlayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Play> _instance;
} _Play_default_instance_;
class StopPlayingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopPlaying> _instance;
} _StopPlaying_default_instance_;
}  // namespace message
static void InitDefaultsscc_info_MotionDetectionEvent_sheetfaced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_MotionDetectionEvent_default_instance_;
    new (ptr) ::message::MotionDetectionEvent();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::MotionDetectionEvent::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MotionDetectionEvent_sheetfaced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MotionDetectionEvent_sheetfaced_2eproto}, {}};

static void InitDefaultsscc_info_Play_sheetfaced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_Play_default_instance_;
    new (ptr) ::message::Play();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::Play::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Play_sheetfaced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Play_sheetfaced_2eproto}, {}};

static void InitDefaultsscc_info_SetMotionDetectionConfig_sheetfaced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_SetMotionDetectionConfig_default_instance_;
    new (ptr) ::message::SetMotionDetectionConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::SetMotionDetectionConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SetMotionDetectionConfig_sheetfaced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SetMotionDetectionConfig_sheetfaced_2eproto}, {}};

static void InitDefaultsscc_info_StopPlaying_sheetfaced_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::message::_StopPlaying_default_instance_;
    new (ptr) ::message::StopPlaying();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::message::StopPlaying::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopPlaying_sheetfaced_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopPlaying_sheetfaced_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sheetfaced_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_sheetfaced_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sheetfaced_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sheetfaced_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::message::MotionDetectionEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::MotionDetectionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::MotionDetectionEvent, unix_timestamp_ms_),
  0,
  PROTOBUF_FIELD_OFFSET(::message::SetMotionDetectionConfig, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::SetMotionDetectionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::SetMotionDetectionConfig, sample_threshold_ratio_),
  PROTOBUF_FIELD_OFFSET(::message::SetMotionDetectionConfig, lockout_period_ms_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::message::Play, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::Play, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::Play, motion_event_unix_timestamp_ms_),
  0,
  PROTOBUF_FIELD_OFFSET(::message::StopPlaying, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::message::StopPlaying, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::message::StopPlaying, motion_event_unix_timestamp_ms_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::message::MotionDetectionEvent)},
  { 7, 14, sizeof(::message::SetMotionDetectionConfig)},
  { 16, 22, sizeof(::message::Play)},
  { 23, 29, sizeof(::message::StopPlaying)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_MotionDetectionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_SetMotionDetectionConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_Play_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::message::_StopPlaying_default_instance_),
};

const char descriptor_table_protodef_sheetfaced_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020sheetfaced.proto\022\007message\"1\n\024MotionDet"
  "ectionEvent\022\031\n\021unix_timestamp_ms\030\001 \002(\004\"U"
  "\n\030SetMotionDetectionConfig\022\036\n\026sample_thr"
  "eshold_ratio\030\001 \002(\001\022\031\n\021lockout_period_ms\030"
  "\002 \002(\004\".\n\004Play\022&\n\036motion_event_unix_times"
  "tamp_ms\030\001 \002(\004\"5\n\013StopPlaying\022&\n\036motion_e"
  "vent_unix_timestamp_ms\030\001 \002(\004*g\n\nPacketTy"
  "pe\022\032\n\026MOTION_DETECTION_EVENT\020\001\022\037\n\033SET_MO"
  "TION_DETECTION_CONFIG\020\002\022\t\n\004PLAY\020\201\001\022\021\n\014ST"
  "OP_PLAYING\020\202\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sheetfaced_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sheetfaced_2eproto_sccs[4] = {
  &scc_info_MotionDetectionEvent_sheetfaced_2eproto.base,
  &scc_info_Play_sheetfaced_2eproto.base,
  &scc_info_SetMotionDetectionConfig_sheetfaced_2eproto.base,
  &scc_info_StopPlaying_sheetfaced_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sheetfaced_2eproto_once;
static bool descriptor_table_sheetfaced_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sheetfaced_2eproto = {
  &descriptor_table_sheetfaced_2eproto_initialized, descriptor_table_protodef_sheetfaced_2eproto, "sheetfaced.proto", 373,
  &descriptor_table_sheetfaced_2eproto_once, descriptor_table_sheetfaced_2eproto_sccs, descriptor_table_sheetfaced_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_sheetfaced_2eproto::offsets,
  file_level_metadata_sheetfaced_2eproto, 4, file_level_enum_descriptors_sheetfaced_2eproto, file_level_service_descriptors_sheetfaced_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sheetfaced_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sheetfaced_2eproto), true);
namespace message {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PacketType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_sheetfaced_2eproto);
  return file_level_enum_descriptors_sheetfaced_2eproto[0];
}
bool PacketType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 129:
    case 130:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void MotionDetectionEvent::InitAsDefaultInstance() {
}
class MotionDetectionEvent::_Internal {
 public:
  using HasBits = decltype(std::declval<MotionDetectionEvent>()._has_bits_);
  static void set_has_unix_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MotionDetectionEvent::MotionDetectionEvent()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.MotionDetectionEvent)
}
MotionDetectionEvent::MotionDetectionEvent(const MotionDetectionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  unix_timestamp_ms_ = from.unix_timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:message.MotionDetectionEvent)
}

void MotionDetectionEvent::SharedCtor() {
  unix_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}

MotionDetectionEvent::~MotionDetectionEvent() {
  // @@protoc_insertion_point(destructor:message.MotionDetectionEvent)
  SharedDtor();
}

void MotionDetectionEvent::SharedDtor() {
}

void MotionDetectionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MotionDetectionEvent& MotionDetectionEvent::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MotionDetectionEvent_sheetfaced_2eproto.base);
  return *internal_default_instance();
}


void MotionDetectionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:message.MotionDetectionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  unix_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* MotionDetectionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 unix_timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_unix_timestamp_ms(&has_bits);
          unix_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MotionDetectionEvent::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.MotionDetectionEvent)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 unix_timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_unix_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.MotionDetectionEvent)
  return target;
}

size_t MotionDetectionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.MotionDetectionEvent)
  size_t total_size = 0;

  // required uint64 unix_timestamp_ms = 1;
  if (has_unix_timestamp_ms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_unix_timestamp_ms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MotionDetectionEvent::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.MotionDetectionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const MotionDetectionEvent* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MotionDetectionEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.MotionDetectionEvent)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.MotionDetectionEvent)
    MergeFrom(*source);
  }
}

void MotionDetectionEvent::MergeFrom(const MotionDetectionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.MotionDetectionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_unix_timestamp_ms()) {
    _internal_set_unix_timestamp_ms(from._internal_unix_timestamp_ms());
  }
}

void MotionDetectionEvent::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.MotionDetectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MotionDetectionEvent::CopyFrom(const MotionDetectionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.MotionDetectionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MotionDetectionEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MotionDetectionEvent::InternalSwap(MotionDetectionEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(unix_timestamp_ms_, other->unix_timestamp_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MotionDetectionEvent::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetMotionDetectionConfig::InitAsDefaultInstance() {
}
class SetMotionDetectionConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<SetMotionDetectionConfig>()._has_bits_);
  static void set_has_sample_threshold_ratio(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lockout_period_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SetMotionDetectionConfig::SetMotionDetectionConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.SetMotionDetectionConfig)
}
SetMotionDetectionConfig::SetMotionDetectionConfig(const SetMotionDetectionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sample_threshold_ratio_, &from.sample_threshold_ratio_,
    static_cast<size_t>(reinterpret_cast<char*>(&lockout_period_ms_) -
    reinterpret_cast<char*>(&sample_threshold_ratio_)) + sizeof(lockout_period_ms_));
  // @@protoc_insertion_point(copy_constructor:message.SetMotionDetectionConfig)
}

void SetMotionDetectionConfig::SharedCtor() {
  ::memset(&sample_threshold_ratio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lockout_period_ms_) -
      reinterpret_cast<char*>(&sample_threshold_ratio_)) + sizeof(lockout_period_ms_));
}

SetMotionDetectionConfig::~SetMotionDetectionConfig() {
  // @@protoc_insertion_point(destructor:message.SetMotionDetectionConfig)
  SharedDtor();
}

void SetMotionDetectionConfig::SharedDtor() {
}

void SetMotionDetectionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetMotionDetectionConfig& SetMotionDetectionConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetMotionDetectionConfig_sheetfaced_2eproto.base);
  return *internal_default_instance();
}


void SetMotionDetectionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:message.SetMotionDetectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sample_threshold_ratio_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lockout_period_ms_) -
        reinterpret_cast<char*>(&sample_threshold_ratio_)) + sizeof(lockout_period_ms_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SetMotionDetectionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double sample_threshold_ratio = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_sample_threshold_ratio(&has_bits);
          sample_threshold_ratio_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint64 lockout_period_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_lockout_period_ms(&has_bits);
          lockout_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetMotionDetectionConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.SetMotionDetectionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double sample_threshold_ratio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_sample_threshold_ratio(), target);
  }

  // required uint64 lockout_period_ms = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_lockout_period_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.SetMotionDetectionConfig)
  return target;
}

size_t SetMotionDetectionConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:message.SetMotionDetectionConfig)
  size_t total_size = 0;

  if (has_sample_threshold_ratio()) {
    // required double sample_threshold_ratio = 1;
    total_size += 1 + 8;
  }

  if (has_lockout_period_ms()) {
    // required uint64 lockout_period_ms = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lockout_period_ms());
  }

  return total_size;
}
size_t SetMotionDetectionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.SetMotionDetectionConfig)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double sample_threshold_ratio = 1;
    total_size += 1 + 8;

    // required uint64 lockout_period_ms = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_lockout_period_ms());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetMotionDetectionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.SetMotionDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SetMotionDetectionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetMotionDetectionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.SetMotionDetectionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.SetMotionDetectionConfig)
    MergeFrom(*source);
  }
}

void SetMotionDetectionConfig::MergeFrom(const SetMotionDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.SetMotionDetectionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sample_threshold_ratio_ = from.sample_threshold_ratio_;
    }
    if (cached_has_bits & 0x00000002u) {
      lockout_period_ms_ = from.lockout_period_ms_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SetMotionDetectionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.SetMotionDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetMotionDetectionConfig::CopyFrom(const SetMotionDetectionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.SetMotionDetectionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetMotionDetectionConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SetMotionDetectionConfig::InternalSwap(SetMotionDetectionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sample_threshold_ratio_, other->sample_threshold_ratio_);
  swap(lockout_period_ms_, other->lockout_period_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetMotionDetectionConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Play::InitAsDefaultInstance() {
}
class Play::_Internal {
 public:
  using HasBits = decltype(std::declval<Play>()._has_bits_);
  static void set_has_motion_event_unix_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Play::Play()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.Play)
}
Play::Play(const Play& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  motion_event_unix_timestamp_ms_ = from.motion_event_unix_timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:message.Play)
}

void Play::SharedCtor() {
  motion_event_unix_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}

Play::~Play() {
  // @@protoc_insertion_point(destructor:message.Play)
  SharedDtor();
}

void Play::SharedDtor() {
}

void Play::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Play& Play::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Play_sheetfaced_2eproto.base);
  return *internal_default_instance();
}


void Play::Clear() {
// @@protoc_insertion_point(message_clear_start:message.Play)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motion_event_unix_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Play::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 motion_event_unix_timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_motion_event_unix_timestamp_ms(&has_bits);
          motion_event_unix_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Play::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.Play)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 motion_event_unix_timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_motion_event_unix_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.Play)
  return target;
}

size_t Play::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.Play)
  size_t total_size = 0;

  // required uint64 motion_event_unix_timestamp_ms = 1;
  if (has_motion_event_unix_timestamp_ms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_motion_event_unix_timestamp_ms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Play::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.Play)
  GOOGLE_DCHECK_NE(&from, this);
  const Play* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Play>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.Play)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.Play)
    MergeFrom(*source);
  }
}

void Play::MergeFrom(const Play& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.Play)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motion_event_unix_timestamp_ms()) {
    _internal_set_motion_event_unix_timestamp_ms(from._internal_motion_event_unix_timestamp_ms());
  }
}

void Play::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Play::CopyFrom(const Play& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.Play)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Play::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Play::InternalSwap(Play* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motion_event_unix_timestamp_ms_, other->motion_event_unix_timestamp_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Play::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopPlaying::InitAsDefaultInstance() {
}
class StopPlaying::_Internal {
 public:
  using HasBits = decltype(std::declval<StopPlaying>()._has_bits_);
  static void set_has_motion_event_unix_timestamp_ms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopPlaying::StopPlaying()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:message.StopPlaying)
}
StopPlaying::StopPlaying(const StopPlaying& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  motion_event_unix_timestamp_ms_ = from.motion_event_unix_timestamp_ms_;
  // @@protoc_insertion_point(copy_constructor:message.StopPlaying)
}

void StopPlaying::SharedCtor() {
  motion_event_unix_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
}

StopPlaying::~StopPlaying() {
  // @@protoc_insertion_point(destructor:message.StopPlaying)
  SharedDtor();
}

void StopPlaying::SharedDtor() {
}

void StopPlaying::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopPlaying& StopPlaying::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopPlaying_sheetfaced_2eproto.base);
  return *internal_default_instance();
}


void StopPlaying::Clear() {
// @@protoc_insertion_point(message_clear_start:message.StopPlaying)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  motion_event_unix_timestamp_ms_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* StopPlaying::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 motion_event_unix_timestamp_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_motion_event_unix_timestamp_ms(&has_bits);
          motion_event_unix_timestamp_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StopPlaying::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:message.StopPlaying)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 motion_event_unix_timestamp_ms = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_motion_event_unix_timestamp_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:message.StopPlaying)
  return target;
}

size_t StopPlaying::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:message.StopPlaying)
  size_t total_size = 0;

  // required uint64 motion_event_unix_timestamp_ms = 1;
  if (has_motion_event_unix_timestamp_ms()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_motion_event_unix_timestamp_ms());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopPlaying::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:message.StopPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  const StopPlaying* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopPlaying>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:message.StopPlaying)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:message.StopPlaying)
    MergeFrom(*source);
  }
}

void StopPlaying::MergeFrom(const StopPlaying& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:message.StopPlaying)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_motion_event_unix_timestamp_ms()) {
    _internal_set_motion_event_unix_timestamp_ms(from._internal_motion_event_unix_timestamp_ms());
  }
}

void StopPlaying::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:message.StopPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopPlaying::CopyFrom(const StopPlaying& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:message.StopPlaying)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopPlaying::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void StopPlaying::InternalSwap(StopPlaying* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(motion_event_unix_timestamp_ms_, other->motion_event_unix_timestamp_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopPlaying::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace message
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::message::MotionDetectionEvent* Arena::CreateMaybeMessage< ::message::MotionDetectionEvent >(Arena* arena) {
  return Arena::CreateInternal< ::message::MotionDetectionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::message::SetMotionDetectionConfig* Arena::CreateMaybeMessage< ::message::SetMotionDetectionConfig >(Arena* arena) {
  return Arena::CreateInternal< ::message::SetMotionDetectionConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::message::Play* Arena::CreateMaybeMessage< ::message::Play >(Arena* arena) {
  return Arena::CreateInternal< ::message::Play >(arena);
}
template<> PROTOBUF_NOINLINE ::message::StopPlaying* Arena::CreateMaybeMessage< ::message::StopPlaying >(Arena* arena) {
  return Arena::CreateInternal< ::message::StopPlaying >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
