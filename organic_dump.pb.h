// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: organic_dump.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_organic_5fdump_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_organic_5fdump_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_organic_5fdump_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_organic_5fdump_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_organic_5fdump_2eproto;
namespace organicdump_proto {
class BasicResponse;
class BasicResponseDefaultTypeInternal;
extern BasicResponseDefaultTypeInternal _BasicResponse_default_instance_;
class Echo;
class EchoDefaultTypeInternal;
extern EchoDefaultTypeInternal _Echo_default_instance_;
class Hello;
class HelloDefaultTypeInternal;
extern HelloDefaultTypeInternal _Hello_default_instance_;
class PeripheralMeta;
class PeripheralMetaDefaultTypeInternal;
extern PeripheralMetaDefaultTypeInternal _PeripheralMeta_default_instance_;
class RegisterRpi;
class RegisterRpiDefaultTypeInternal;
extern RegisterRpiDefaultTypeInternal _RegisterRpi_default_instance_;
class RegisterSoilMoistureSensor;
class RegisterSoilMoistureSensorDefaultTypeInternal;
extern RegisterSoilMoistureSensorDefaultTypeInternal _RegisterSoilMoistureSensor_default_instance_;
class SendSoilMoistureMeasurement;
class SendSoilMoistureMeasurementDefaultTypeInternal;
extern SendSoilMoistureMeasurementDefaultTypeInternal _SendSoilMoistureMeasurement_default_instance_;
class UpdatePeripheralOwnership;
class UpdatePeripheralOwnershipDefaultTypeInternal;
extern UpdatePeripheralOwnershipDefaultTypeInternal _UpdatePeripheralOwnership_default_instance_;
}  // namespace organicdump_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::organicdump_proto::BasicResponse* Arena::CreateMaybeMessage<::organicdump_proto::BasicResponse>(Arena*);
template<> ::organicdump_proto::Echo* Arena::CreateMaybeMessage<::organicdump_proto::Echo>(Arena*);
template<> ::organicdump_proto::Hello* Arena::CreateMaybeMessage<::organicdump_proto::Hello>(Arena*);
template<> ::organicdump_proto::PeripheralMeta* Arena::CreateMaybeMessage<::organicdump_proto::PeripheralMeta>(Arena*);
template<> ::organicdump_proto::RegisterRpi* Arena::CreateMaybeMessage<::organicdump_proto::RegisterRpi>(Arena*);
template<> ::organicdump_proto::RegisterSoilMoistureSensor* Arena::CreateMaybeMessage<::organicdump_proto::RegisterSoilMoistureSensor>(Arena*);
template<> ::organicdump_proto::SendSoilMoistureMeasurement* Arena::CreateMaybeMessage<::organicdump_proto::SendSoilMoistureMeasurement>(Arena*);
template<> ::organicdump_proto::UpdatePeripheralOwnership* Arena::CreateMaybeMessage<::organicdump_proto::UpdatePeripheralOwnership>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace organicdump_proto {

enum MessageType : int {
  SERVER_ECHO = 0,
  HELLO = 1,
  REGISTER_RPI = 2,
  REGISTER_SOIL_MOISTURE_SENSOR = 3,
  UPDATE_PERIPHERAL_OWNERSHIP = 4,
  SEND_SOIL_MOISTURE_MEASUREMENT = 5,
  CLIENT_ECHO = 128,
  BASIC_RESPONSE = 129
};
bool MessageType_IsValid(int value);
constexpr MessageType MessageType_MIN = SERVER_ECHO;
constexpr MessageType MessageType_MAX = BASIC_RESPONSE;
constexpr int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor();
template<typename T>
inline const std::string& MessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageType_descriptor(), enum_t_value);
}
inline bool MessageType_Parse(
    const std::string& name, MessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ClientType : int {
  UNKNOWN = 0,
  CONTROL = 1,
  RPI_POT = 2
};
bool ClientType_IsValid(int value);
constexpr ClientType ClientType_MIN = UNKNOWN;
constexpr ClientType ClientType_MAX = RPI_POT;
constexpr int ClientType_ARRAYSIZE = ClientType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor();
template<typename T>
inline const std::string& ClientType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ClientType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ClientType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ClientType_descriptor(), enum_t_value);
}
inline bool ClientType_Parse(
    const std::string& name, ClientType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ClientType>(
    ClientType_descriptor(), name, value);
}
enum PeripheralType : int {
  SOIL_MOISTURE_SENSOR = 0,
  CAMERA_SENSOR = 1,
  LUX_SENSOR = 2,
  PIR_SENSOR = 3,
  TEMPERATURE_SENSOR = 4
};
bool PeripheralType_IsValid(int value);
constexpr PeripheralType PeripheralType_MIN = SOIL_MOISTURE_SENSOR;
constexpr PeripheralType PeripheralType_MAX = TEMPERATURE_SENSOR;
constexpr int PeripheralType_ARRAYSIZE = PeripheralType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeripheralType_descriptor();
template<typename T>
inline const std::string& PeripheralType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PeripheralType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PeripheralType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PeripheralType_descriptor(), enum_t_value);
}
inline bool PeripheralType_Parse(
    const std::string& name, PeripheralType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PeripheralType>(
    PeripheralType_descriptor(), name, value);
}
enum ErrorCode : int {
  OK = 0,
  UNAUTHOROZED = 1,
  INVALID_PARAMETER = 2,
  INTERNAL_SERVER_ERROR = 3
};
bool ErrorCode_IsValid(int value);
constexpr ErrorCode ErrorCode_MIN = OK;
constexpr ErrorCode ErrorCode_MAX = INTERNAL_SERVER_ERROR;
constexpr int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor();
template<typename T>
inline const std::string& ErrorCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ErrorCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ErrorCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ErrorCode_descriptor(), enum_t_value);
}
inline bool ErrorCode_Parse(
    const std::string& name, ErrorCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class Echo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.Echo) */ {
 public:
  Echo();
  virtual ~Echo();

  Echo(const Echo& from);
  Echo(Echo&& from) noexcept
    : Echo() {
    *this = ::std::move(from);
  }

  inline Echo& operator=(const Echo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Echo& operator=(Echo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Echo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Echo* internal_default_instance() {
    return reinterpret_cast<const Echo*>(
               &_Echo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Echo& a, Echo& b) {
    a.Swap(&b);
  }
  inline void Swap(Echo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Echo* New() const final {
    return CreateMaybeMessage<Echo>(nullptr);
  }

  Echo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Echo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Echo& from);
  void MergeFrom(const Echo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Echo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.Echo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.Echo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class Hello :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.Hello) */ {
 public:
  Hello();
  virtual ~Hello();

  Hello(const Hello& from);
  Hello(Hello&& from) noexcept
    : Hello() {
    *this = ::std::move(from);
  }

  inline Hello& operator=(const Hello& from) {
    CopyFrom(from);
    return *this;
  }
  inline Hello& operator=(Hello&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Hello& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Hello* internal_default_instance() {
    return reinterpret_cast<const Hello*>(
               &_Hello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Hello& a, Hello& b) {
    a.Swap(&b);
  }
  inline void Swap(Hello* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Hello* New() const final {
    return CreateMaybeMessage<Hello>(nullptr);
  }

  Hello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Hello>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Hello& from);
  void MergeFrom(const Hello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Hello* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.Hello";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kClientIdFieldNumber = 2,
  };
  // required .organicdump_proto.ClientType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::organicdump_proto::ClientType type() const;
  void set_type(::organicdump_proto::ClientType value);
  private:
  ::organicdump_proto::ClientType _internal_type() const;
  void _internal_set_type(::organicdump_proto::ClientType value);
  public:

  // optional int32 client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  ::PROTOBUF_NAMESPACE_ID::int32 client_id() const;
  void set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_id() const;
  void _internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.Hello)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_id_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class BasicResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.BasicResponse) */ {
 public:
  BasicResponse();
  virtual ~BasicResponse();

  BasicResponse(const BasicResponse& from);
  BasicResponse(BasicResponse&& from) noexcept
    : BasicResponse() {
    *this = ::std::move(from);
  }

  inline BasicResponse& operator=(const BasicResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BasicResponse& operator=(BasicResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BasicResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BasicResponse* internal_default_instance() {
    return reinterpret_cast<const BasicResponse*>(
               &_BasicResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BasicResponse& a, BasicResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BasicResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BasicResponse* New() const final {
    return CreateMaybeMessage<BasicResponse>(nullptr);
  }

  BasicResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BasicResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BasicResponse& from);
  void MergeFrom(const BasicResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BasicResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.BasicResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kCodeFieldNumber = 1,
    kIdFieldNumber = 3,
  };
  // optional string message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // required .organicdump_proto.ErrorCode code = 1;
  bool has_code() const;
  private:
  bool _internal_has_code() const;
  public:
  void clear_code();
  ::organicdump_proto::ErrorCode code() const;
  void set_code(::organicdump_proto::ErrorCode value);
  private:
  ::organicdump_proto::ErrorCode _internal_code() const;
  void _internal_set_code(::organicdump_proto::ErrorCode value);
  public:

  // optional int32 id = 3;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.BasicResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class RegisterRpi :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.RegisterRpi) */ {
 public:
  RegisterRpi();
  virtual ~RegisterRpi();

  RegisterRpi(const RegisterRpi& from);
  RegisterRpi(RegisterRpi&& from) noexcept
    : RegisterRpi() {
    *this = ::std::move(from);
  }

  inline RegisterRpi& operator=(const RegisterRpi& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterRpi& operator=(RegisterRpi&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterRpi& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterRpi* internal_default_instance() {
    return reinterpret_cast<const RegisterRpi*>(
               &_RegisterRpi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegisterRpi& a, RegisterRpi& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterRpi* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterRpi* New() const final {
    return CreateMaybeMessage<RegisterRpi>(nullptr);
  }

  RegisterRpi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterRpi>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterRpi& from);
  void MergeFrom(const RegisterRpi& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterRpi* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.RegisterRpi";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.RegisterRpi)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class PeripheralMeta :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.PeripheralMeta) */ {
 public:
  PeripheralMeta();
  virtual ~PeripheralMeta();

  PeripheralMeta(const PeripheralMeta& from);
  PeripheralMeta(PeripheralMeta&& from) noexcept
    : PeripheralMeta() {
    *this = ::std::move(from);
  }

  inline PeripheralMeta& operator=(const PeripheralMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline PeripheralMeta& operator=(PeripheralMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PeripheralMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PeripheralMeta* internal_default_instance() {
    return reinterpret_cast<const PeripheralMeta*>(
               &_PeripheralMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PeripheralMeta& a, PeripheralMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(PeripheralMeta* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PeripheralMeta* New() const final {
    return CreateMaybeMessage<PeripheralMeta>(nullptr);
  }

  PeripheralMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PeripheralMeta>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PeripheralMeta& from);
  void MergeFrom(const PeripheralMeta& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PeripheralMeta* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.PeripheralMeta";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kLocationFieldNumber = 2,
    kRpiIdFieldNumber = 3,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  private:
  const std::string& _internal_location() const;
  void _internal_set_location(const std::string& value);
  std::string* _internal_mutable_location();
  public:

  // optional int32 rpi_id = 3;
  bool has_rpi_id() const;
  private:
  bool _internal_has_rpi_id() const;
  public:
  void clear_rpi_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rpi_id() const;
  void set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpi_id() const;
  void _internal_set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.PeripheralMeta)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpi_id_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class RegisterSoilMoistureSensor :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.RegisterSoilMoistureSensor) */ {
 public:
  RegisterSoilMoistureSensor();
  virtual ~RegisterSoilMoistureSensor();

  RegisterSoilMoistureSensor(const RegisterSoilMoistureSensor& from);
  RegisterSoilMoistureSensor(RegisterSoilMoistureSensor&& from) noexcept
    : RegisterSoilMoistureSensor() {
    *this = ::std::move(from);
  }

  inline RegisterSoilMoistureSensor& operator=(const RegisterSoilMoistureSensor& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegisterSoilMoistureSensor& operator=(RegisterSoilMoistureSensor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegisterSoilMoistureSensor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterSoilMoistureSensor* internal_default_instance() {
    return reinterpret_cast<const RegisterSoilMoistureSensor*>(
               &_RegisterSoilMoistureSensor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RegisterSoilMoistureSensor& a, RegisterSoilMoistureSensor& b) {
    a.Swap(&b);
  }
  inline void Swap(RegisterSoilMoistureSensor* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegisterSoilMoistureSensor* New() const final {
    return CreateMaybeMessage<RegisterSoilMoistureSensor>(nullptr);
  }

  RegisterSoilMoistureSensor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegisterSoilMoistureSensor>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegisterSoilMoistureSensor& from);
  void MergeFrom(const RegisterSoilMoistureSensor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterSoilMoistureSensor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.RegisterSoilMoistureSensor";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMetaFieldNumber = 1,
    kFloorFieldNumber = 2,
    kCeilFieldNumber = 3,
  };
  // required .organicdump_proto.PeripheralMeta meta = 1;
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::organicdump_proto::PeripheralMeta& meta() const;
  ::organicdump_proto::PeripheralMeta* release_meta();
  ::organicdump_proto::PeripheralMeta* mutable_meta();
  void set_allocated_meta(::organicdump_proto::PeripheralMeta* meta);
  private:
  const ::organicdump_proto::PeripheralMeta& _internal_meta() const;
  ::organicdump_proto::PeripheralMeta* _internal_mutable_meta();
  public:

  // required double floor = 2;
  bool has_floor() const;
  private:
  bool _internal_has_floor() const;
  public:
  void clear_floor();
  double floor() const;
  void set_floor(double value);
  private:
  double _internal_floor() const;
  void _internal_set_floor(double value);
  public:

  // required double ceil = 3;
  bool has_ceil() const;
  private:
  bool _internal_has_ceil() const;
  public:
  void clear_ceil();
  double ceil() const;
  void set_ceil(double value);
  private:
  double _internal_ceil() const;
  void _internal_set_ceil(double value);
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.RegisterSoilMoistureSensor)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::organicdump_proto::PeripheralMeta* meta_;
  double floor_;
  double ceil_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class UpdatePeripheralOwnership :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.UpdatePeripheralOwnership) */ {
 public:
  UpdatePeripheralOwnership();
  virtual ~UpdatePeripheralOwnership();

  UpdatePeripheralOwnership(const UpdatePeripheralOwnership& from);
  UpdatePeripheralOwnership(UpdatePeripheralOwnership&& from) noexcept
    : UpdatePeripheralOwnership() {
    *this = ::std::move(from);
  }

  inline UpdatePeripheralOwnership& operator=(const UpdatePeripheralOwnership& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePeripheralOwnership& operator=(UpdatePeripheralOwnership&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdatePeripheralOwnership& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePeripheralOwnership* internal_default_instance() {
    return reinterpret_cast<const UpdatePeripheralOwnership*>(
               &_UpdatePeripheralOwnership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdatePeripheralOwnership& a, UpdatePeripheralOwnership& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePeripheralOwnership* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePeripheralOwnership* New() const final {
    return CreateMaybeMessage<UpdatePeripheralOwnership>(nullptr);
  }

  UpdatePeripheralOwnership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePeripheralOwnership>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePeripheralOwnership& from);
  void MergeFrom(const UpdatePeripheralOwnership& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePeripheralOwnership* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.UpdatePeripheralOwnership";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeripheralIdFieldNumber = 1,
    kRpiIdFieldNumber = 2,
    kOrphanPeripheralFieldNumber = 3,
  };
  // required int32 peripheral_id = 1;
  bool has_peripheral_id() const;
  private:
  bool _internal_has_peripheral_id() const;
  public:
  void clear_peripheral_id();
  ::PROTOBUF_NAMESPACE_ID::int32 peripheral_id() const;
  void set_peripheral_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_peripheral_id() const;
  void _internal_set_peripheral_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 rpi_id = 2;
  bool has_rpi_id() const;
  private:
  bool _internal_has_rpi_id() const;
  public:
  void clear_rpi_id();
  ::PROTOBUF_NAMESPACE_ID::int32 rpi_id() const;
  void set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rpi_id() const;
  void _internal_set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool orphan_peripheral = 3;
  bool has_orphan_peripheral() const;
  private:
  bool _internal_has_orphan_peripheral() const;
  public:
  void clear_orphan_peripheral();
  bool orphan_peripheral() const;
  void set_orphan_peripheral(bool value);
  private:
  bool _internal_orphan_peripheral() const;
  void _internal_set_orphan_peripheral(bool value);
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.UpdatePeripheralOwnership)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 peripheral_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 rpi_id_;
  bool orphan_peripheral_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// -------------------------------------------------------------------

class SendSoilMoistureMeasurement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:organicdump_proto.SendSoilMoistureMeasurement) */ {
 public:
  SendSoilMoistureMeasurement();
  virtual ~SendSoilMoistureMeasurement();

  SendSoilMoistureMeasurement(const SendSoilMoistureMeasurement& from);
  SendSoilMoistureMeasurement(SendSoilMoistureMeasurement&& from) noexcept
    : SendSoilMoistureMeasurement() {
    *this = ::std::move(from);
  }

  inline SendSoilMoistureMeasurement& operator=(const SendSoilMoistureMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendSoilMoistureMeasurement& operator=(SendSoilMoistureMeasurement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendSoilMoistureMeasurement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendSoilMoistureMeasurement* internal_default_instance() {
    return reinterpret_cast<const SendSoilMoistureMeasurement*>(
               &_SendSoilMoistureMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SendSoilMoistureMeasurement& a, SendSoilMoistureMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(SendSoilMoistureMeasurement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendSoilMoistureMeasurement* New() const final {
    return CreateMaybeMessage<SendSoilMoistureMeasurement>(nullptr);
  }

  SendSoilMoistureMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendSoilMoistureMeasurement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendSoilMoistureMeasurement& from);
  void MergeFrom(const SendSoilMoistureMeasurement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendSoilMoistureMeasurement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "organicdump_proto.SendSoilMoistureMeasurement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_organic_5fdump_2eproto);
    return ::descriptor_table_organic_5fdump_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSensorIdFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required int32 sensor_id = 1;
  bool has_sensor_id() const;
  private:
  bool _internal_has_sensor_id() const;
  public:
  void clear_sensor_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id() const;
  void set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sensor_id() const;
  void _internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required float value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  float value() const;
  void set_value(float value);
  private:
  float _internal_value() const;
  void _internal_set_value(float value);
  public:

  // @@protoc_insertion_point(class_scope:organicdump_proto.SendSoilMoistureMeasurement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 sensor_id_;
  float value_;
  friend struct ::TableStruct_organic_5fdump_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Echo

// required string message = 1;
inline bool Echo::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Echo::has_message() const {
  return _internal_has_message();
}
inline void Echo::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Echo::message() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.Echo.message)
  return _internal_message();
}
inline void Echo::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.Echo.message)
}
inline std::string* Echo::mutable_message() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.Echo.message)
  return _internal_mutable_message();
}
inline const std::string& Echo::_internal_message() const {
  return message_.GetNoArena();
}
inline void Echo::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Echo::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:organicdump_proto.Echo.message)
}
inline void Echo::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:organicdump_proto.Echo.message)
}
inline void Echo::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:organicdump_proto.Echo.message)
}
inline std::string* Echo::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Echo::release_message() {
  // @@protoc_insertion_point(field_release:organicdump_proto.Echo.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Echo::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.Echo.message)
}

// -------------------------------------------------------------------

// Hello

// required .organicdump_proto.ClientType type = 1;
inline bool Hello::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Hello::has_type() const {
  return _internal_has_type();
}
inline void Hello::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::organicdump_proto::ClientType Hello::_internal_type() const {
  return static_cast< ::organicdump_proto::ClientType >(type_);
}
inline ::organicdump_proto::ClientType Hello::type() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.Hello.type)
  return _internal_type();
}
inline void Hello::_internal_set_type(::organicdump_proto::ClientType value) {
  assert(::organicdump_proto::ClientType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
}
inline void Hello::set_type(::organicdump_proto::ClientType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.Hello.type)
}

// optional int32 client_id = 2;
inline bool Hello::_internal_has_client_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Hello::has_client_id() const {
  return _internal_has_client_id();
}
inline void Hello::clear_client_id() {
  client_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hello::_internal_client_id() const {
  return client_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Hello::client_id() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.Hello.client_id)
  return _internal_client_id();
}
inline void Hello::_internal_set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  client_id_ = value;
}
inline void Hello::set_client_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.Hello.client_id)
}

// -------------------------------------------------------------------

// BasicResponse

// required .organicdump_proto.ErrorCode code = 1;
inline bool BasicResponse::_internal_has_code() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BasicResponse::has_code() const {
  return _internal_has_code();
}
inline void BasicResponse::clear_code() {
  code_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::organicdump_proto::ErrorCode BasicResponse::_internal_code() const {
  return static_cast< ::organicdump_proto::ErrorCode >(code_);
}
inline ::organicdump_proto::ErrorCode BasicResponse::code() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.BasicResponse.code)
  return _internal_code();
}
inline void BasicResponse::_internal_set_code(::organicdump_proto::ErrorCode value) {
  assert(::organicdump_proto::ErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000002u;
  code_ = value;
}
inline void BasicResponse::set_code(::organicdump_proto::ErrorCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.BasicResponse.code)
}

// optional string message = 2;
inline bool BasicResponse::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BasicResponse::has_message() const {
  return _internal_has_message();
}
inline void BasicResponse::clear_message() {
  message_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BasicResponse::message() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.BasicResponse.message)
  return _internal_message();
}
inline void BasicResponse::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.BasicResponse.message)
}
inline std::string* BasicResponse::mutable_message() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.BasicResponse.message)
  return _internal_mutable_message();
}
inline const std::string& BasicResponse::_internal_message() const {
  return message_.GetNoArena();
}
inline void BasicResponse::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void BasicResponse::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:organicdump_proto.BasicResponse.message)
}
inline void BasicResponse::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:organicdump_proto.BasicResponse.message)
}
inline void BasicResponse::set_message(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:organicdump_proto.BasicResponse.message)
}
inline std::string* BasicResponse::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* BasicResponse::release_message() {
  // @@protoc_insertion_point(field_release:organicdump_proto.BasicResponse.message)
  if (!has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void BasicResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.BasicResponse.message)
}

// optional int32 id = 3;
inline bool BasicResponse::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BasicResponse::has_id() const {
  return _internal_has_id();
}
inline void BasicResponse::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicResponse::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BasicResponse::id() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.BasicResponse.id)
  return _internal_id();
}
inline void BasicResponse::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  id_ = value;
}
inline void BasicResponse::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.BasicResponse.id)
}

// -------------------------------------------------------------------

// RegisterRpi

// required string name = 1;
inline bool RegisterRpi::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegisterRpi::has_name() const {
  return _internal_has_name();
}
inline void RegisterRpi::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegisterRpi::name() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.RegisterRpi.name)
  return _internal_name();
}
inline void RegisterRpi::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.RegisterRpi.name)
}
inline std::string* RegisterRpi::mutable_name() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.RegisterRpi.name)
  return _internal_mutable_name();
}
inline const std::string& RegisterRpi::_internal_name() const {
  return name_.GetNoArena();
}
inline void RegisterRpi::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRpi::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:organicdump_proto.RegisterRpi.name)
}
inline void RegisterRpi::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:organicdump_proto.RegisterRpi.name)
}
inline void RegisterRpi::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:organicdump_proto.RegisterRpi.name)
}
inline std::string* RegisterRpi::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRpi::release_name() {
  // @@protoc_insertion_point(field_release:organicdump_proto.RegisterRpi.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRpi::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.RegisterRpi.name)
}

// required string location = 2;
inline bool RegisterRpi::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterRpi::has_location() const {
  return _internal_has_location();
}
inline void RegisterRpi::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegisterRpi::location() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.RegisterRpi.location)
  return _internal_location();
}
inline void RegisterRpi::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.RegisterRpi.location)
}
inline std::string* RegisterRpi::mutable_location() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.RegisterRpi.location)
  return _internal_mutable_location();
}
inline const std::string& RegisterRpi::_internal_location() const {
  return location_.GetNoArena();
}
inline void RegisterRpi::_internal_set_location(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RegisterRpi::set_location(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:organicdump_proto.RegisterRpi.location)
}
inline void RegisterRpi::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:organicdump_proto.RegisterRpi.location)
}
inline void RegisterRpi::set_location(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:organicdump_proto.RegisterRpi.location)
}
inline std::string* RegisterRpi::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RegisterRpi::release_location() {
  // @@protoc_insertion_point(field_release:organicdump_proto.RegisterRpi.location)
  if (!has_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterRpi::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.RegisterRpi.location)
}

// -------------------------------------------------------------------

// PeripheralMeta

// required string name = 1;
inline bool PeripheralMeta::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PeripheralMeta::has_name() const {
  return _internal_has_name();
}
inline void PeripheralMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PeripheralMeta::name() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.PeripheralMeta.name)
  return _internal_name();
}
inline void PeripheralMeta::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.PeripheralMeta.name)
}
inline std::string* PeripheralMeta::mutable_name() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.PeripheralMeta.name)
  return _internal_mutable_name();
}
inline const std::string& PeripheralMeta::_internal_name() const {
  return name_.GetNoArena();
}
inline void PeripheralMeta::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeripheralMeta::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:organicdump_proto.PeripheralMeta.name)
}
inline void PeripheralMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:organicdump_proto.PeripheralMeta.name)
}
inline void PeripheralMeta::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:organicdump_proto.PeripheralMeta.name)
}
inline std::string* PeripheralMeta::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeripheralMeta::release_name() {
  // @@protoc_insertion_point(field_release:organicdump_proto.PeripheralMeta.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeripheralMeta::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.PeripheralMeta.name)
}

// required string location = 2;
inline bool PeripheralMeta::_internal_has_location() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PeripheralMeta::has_location() const {
  return _internal_has_location();
}
inline void PeripheralMeta::clear_location() {
  location_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PeripheralMeta::location() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.PeripheralMeta.location)
  return _internal_location();
}
inline void PeripheralMeta::set_location(const std::string& value) {
  _internal_set_location(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.PeripheralMeta.location)
}
inline std::string* PeripheralMeta::mutable_location() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.PeripheralMeta.location)
  return _internal_mutable_location();
}
inline const std::string& PeripheralMeta::_internal_location() const {
  return location_.GetNoArena();
}
inline void PeripheralMeta::_internal_set_location(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void PeripheralMeta::set_location(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:organicdump_proto.PeripheralMeta.location)
}
inline void PeripheralMeta::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:organicdump_proto.PeripheralMeta.location)
}
inline void PeripheralMeta::set_location(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  location_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:organicdump_proto.PeripheralMeta.location)
}
inline std::string* PeripheralMeta::_internal_mutable_location() {
  _has_bits_[0] |= 0x00000002u;
  return location_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* PeripheralMeta::release_location() {
  // @@protoc_insertion_point(field_release:organicdump_proto.PeripheralMeta.location)
  if (!has_location()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return location_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void PeripheralMeta::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  location_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.PeripheralMeta.location)
}

// optional int32 rpi_id = 3;
inline bool PeripheralMeta::_internal_has_rpi_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PeripheralMeta::has_rpi_id() const {
  return _internal_has_rpi_id();
}
inline void PeripheralMeta::clear_rpi_id() {
  rpi_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PeripheralMeta::_internal_rpi_id() const {
  return rpi_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PeripheralMeta::rpi_id() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.PeripheralMeta.rpi_id)
  return _internal_rpi_id();
}
inline void PeripheralMeta::_internal_set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  rpi_id_ = value;
}
inline void PeripheralMeta::set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpi_id(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.PeripheralMeta.rpi_id)
}

// -------------------------------------------------------------------

// RegisterSoilMoistureSensor

// required .organicdump_proto.PeripheralMeta meta = 1;
inline bool RegisterSoilMoistureSensor::_internal_has_meta() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || meta_ != nullptr);
  return value;
}
inline bool RegisterSoilMoistureSensor::has_meta() const {
  return _internal_has_meta();
}
inline void RegisterSoilMoistureSensor::clear_meta() {
  if (meta_ != nullptr) meta_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::organicdump_proto::PeripheralMeta& RegisterSoilMoistureSensor::_internal_meta() const {
  const ::organicdump_proto::PeripheralMeta* p = meta_;
  return p != nullptr ? *p : *reinterpret_cast<const ::organicdump_proto::PeripheralMeta*>(
      &::organicdump_proto::_PeripheralMeta_default_instance_);
}
inline const ::organicdump_proto::PeripheralMeta& RegisterSoilMoistureSensor::meta() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.RegisterSoilMoistureSensor.meta)
  return _internal_meta();
}
inline ::organicdump_proto::PeripheralMeta* RegisterSoilMoistureSensor::release_meta() {
  // @@protoc_insertion_point(field_release:organicdump_proto.RegisterSoilMoistureSensor.meta)
  _has_bits_[0] &= ~0x00000001u;
  ::organicdump_proto::PeripheralMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::organicdump_proto::PeripheralMeta* RegisterSoilMoistureSensor::_internal_mutable_meta() {
  _has_bits_[0] |= 0x00000001u;
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::organicdump_proto::PeripheralMeta>(GetArenaNoVirtual());
    meta_ = p;
  }
  return meta_;
}
inline ::organicdump_proto::PeripheralMeta* RegisterSoilMoistureSensor::mutable_meta() {
  // @@protoc_insertion_point(field_mutable:organicdump_proto.RegisterSoilMoistureSensor.meta)
  return _internal_mutable_meta();
}
inline void RegisterSoilMoistureSensor::set_allocated_meta(::organicdump_proto::PeripheralMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete meta_;
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:organicdump_proto.RegisterSoilMoistureSensor.meta)
}

// required double floor = 2;
inline bool RegisterSoilMoistureSensor::_internal_has_floor() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegisterSoilMoistureSensor::has_floor() const {
  return _internal_has_floor();
}
inline void RegisterSoilMoistureSensor::clear_floor() {
  floor_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RegisterSoilMoistureSensor::_internal_floor() const {
  return floor_;
}
inline double RegisterSoilMoistureSensor::floor() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.RegisterSoilMoistureSensor.floor)
  return _internal_floor();
}
inline void RegisterSoilMoistureSensor::_internal_set_floor(double value) {
  _has_bits_[0] |= 0x00000002u;
  floor_ = value;
}
inline void RegisterSoilMoistureSensor::set_floor(double value) {
  _internal_set_floor(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.RegisterSoilMoistureSensor.floor)
}

// required double ceil = 3;
inline bool RegisterSoilMoistureSensor::_internal_has_ceil() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegisterSoilMoistureSensor::has_ceil() const {
  return _internal_has_ceil();
}
inline void RegisterSoilMoistureSensor::clear_ceil() {
  ceil_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RegisterSoilMoistureSensor::_internal_ceil() const {
  return ceil_;
}
inline double RegisterSoilMoistureSensor::ceil() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.RegisterSoilMoistureSensor.ceil)
  return _internal_ceil();
}
inline void RegisterSoilMoistureSensor::_internal_set_ceil(double value) {
  _has_bits_[0] |= 0x00000004u;
  ceil_ = value;
}
inline void RegisterSoilMoistureSensor::set_ceil(double value) {
  _internal_set_ceil(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.RegisterSoilMoistureSensor.ceil)
}

// -------------------------------------------------------------------

// UpdatePeripheralOwnership

// required int32 peripheral_id = 1;
inline bool UpdatePeripheralOwnership::_internal_has_peripheral_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpdatePeripheralOwnership::has_peripheral_id() const {
  return _internal_has_peripheral_id();
}
inline void UpdatePeripheralOwnership::clear_peripheral_id() {
  peripheral_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePeripheralOwnership::_internal_peripheral_id() const {
  return peripheral_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePeripheralOwnership::peripheral_id() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.UpdatePeripheralOwnership.peripheral_id)
  return _internal_peripheral_id();
}
inline void UpdatePeripheralOwnership::_internal_set_peripheral_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  peripheral_id_ = value;
}
inline void UpdatePeripheralOwnership::set_peripheral_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_peripheral_id(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.UpdatePeripheralOwnership.peripheral_id)
}

// required int32 rpi_id = 2;
inline bool UpdatePeripheralOwnership::_internal_has_rpi_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpdatePeripheralOwnership::has_rpi_id() const {
  return _internal_has_rpi_id();
}
inline void UpdatePeripheralOwnership::clear_rpi_id() {
  rpi_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePeripheralOwnership::_internal_rpi_id() const {
  return rpi_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UpdatePeripheralOwnership::rpi_id() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.UpdatePeripheralOwnership.rpi_id)
  return _internal_rpi_id();
}
inline void UpdatePeripheralOwnership::_internal_set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  rpi_id_ = value;
}
inline void UpdatePeripheralOwnership::set_rpi_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rpi_id(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.UpdatePeripheralOwnership.rpi_id)
}

// required bool orphan_peripheral = 3;
inline bool UpdatePeripheralOwnership::_internal_has_orphan_peripheral() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpdatePeripheralOwnership::has_orphan_peripheral() const {
  return _internal_has_orphan_peripheral();
}
inline void UpdatePeripheralOwnership::clear_orphan_peripheral() {
  orphan_peripheral_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool UpdatePeripheralOwnership::_internal_orphan_peripheral() const {
  return orphan_peripheral_;
}
inline bool UpdatePeripheralOwnership::orphan_peripheral() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.UpdatePeripheralOwnership.orphan_peripheral)
  return _internal_orphan_peripheral();
}
inline void UpdatePeripheralOwnership::_internal_set_orphan_peripheral(bool value) {
  _has_bits_[0] |= 0x00000004u;
  orphan_peripheral_ = value;
}
inline void UpdatePeripheralOwnership::set_orphan_peripheral(bool value) {
  _internal_set_orphan_peripheral(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.UpdatePeripheralOwnership.orphan_peripheral)
}

// -------------------------------------------------------------------

// SendSoilMoistureMeasurement

// required int32 sensor_id = 1;
inline bool SendSoilMoistureMeasurement::_internal_has_sensor_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool SendSoilMoistureMeasurement::has_sensor_id() const {
  return _internal_has_sensor_id();
}
inline void SendSoilMoistureMeasurement::clear_sensor_id() {
  sensor_id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendSoilMoistureMeasurement::_internal_sensor_id() const {
  return sensor_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SendSoilMoistureMeasurement::sensor_id() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.SendSoilMoistureMeasurement.sensor_id)
  return _internal_sensor_id();
}
inline void SendSoilMoistureMeasurement::_internal_set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  sensor_id_ = value;
}
inline void SendSoilMoistureMeasurement::set_sensor_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sensor_id(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.SendSoilMoistureMeasurement.sensor_id)
}

// required float value = 2;
inline bool SendSoilMoistureMeasurement::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SendSoilMoistureMeasurement::has_value() const {
  return _internal_has_value();
}
inline void SendSoilMoistureMeasurement::clear_value() {
  value_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SendSoilMoistureMeasurement::_internal_value() const {
  return value_;
}
inline float SendSoilMoistureMeasurement::value() const {
  // @@protoc_insertion_point(field_get:organicdump_proto.SendSoilMoistureMeasurement.value)
  return _internal_value();
}
inline void SendSoilMoistureMeasurement::_internal_set_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  value_ = value;
}
inline void SendSoilMoistureMeasurement::set_value(float value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:organicdump_proto.SendSoilMoistureMeasurement.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace organicdump_proto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::organicdump_proto::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::organicdump_proto::MessageType>() {
  return ::organicdump_proto::MessageType_descriptor();
}
template <> struct is_proto_enum< ::organicdump_proto::ClientType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::organicdump_proto::ClientType>() {
  return ::organicdump_proto::ClientType_descriptor();
}
template <> struct is_proto_enum< ::organicdump_proto::PeripheralType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::organicdump_proto::PeripheralType>() {
  return ::organicdump_proto::PeripheralType_descriptor();
}
template <> struct is_proto_enum< ::organicdump_proto::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::organicdump_proto::ErrorCode>() {
  return ::organicdump_proto::ErrorCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_organic_5fdump_2eproto
