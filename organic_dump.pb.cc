// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: organic_dump.proto

#include "organic_dump.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace organicdump_proto {
class EchoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Echo> _instance;
} _Echo_default_instance_;
class HelloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hello> _instance;
} _Hello_default_instance_;
class BasicResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicResponse> _instance;
} _BasicResponse_default_instance_;
class RegisterClientDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterClient> _instance;
} _RegisterClient_default_instance_;
class RegisterSoilMoistureSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterSoilMoistureSensor> _instance;
} _RegisterSoilMoistureSensor_default_instance_;
class UpdatePeripheralAssociationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeripheralAssociation> _instance;
} _UpdatePeripheralAssociation_default_instance_;
}  // namespace organicdump_proto
static void InitDefaultsscc_info_BasicResponse_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_BasicResponse_default_instance_;
    new (ptr) ::organicdump_proto::BasicResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::BasicResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicResponse_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicResponse_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_Echo_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_Echo_default_instance_;
    new (ptr) ::organicdump_proto::Echo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::Echo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Echo_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Echo_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_Hello_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_Hello_default_instance_;
    new (ptr) ::organicdump_proto::Hello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::Hello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hello_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hello_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_RegisterClient_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_RegisterClient_default_instance_;
    new (ptr) ::organicdump_proto::RegisterClient();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::RegisterClient::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterClient_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterClient_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_RegisterSoilMoistureSensor_default_instance_;
    new (ptr) ::organicdump_proto::RegisterSoilMoistureSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::RegisterSoilMoistureSensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePeripheralAssociation_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_UpdatePeripheralAssociation_default_instance_;
    new (ptr) ::organicdump_proto::UpdatePeripheralAssociation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::UpdatePeripheralAssociation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePeripheralAssociation_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePeripheralAssociation_organic_5fdump_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_organic_5fdump_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_organic_5fdump_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_organic_5fdump_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_organic_5fdump_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Echo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Echo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Echo, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, type_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, client_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, code_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, message_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterClient, type_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterClient, client_name_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterClient, location_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, floor_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, ceil_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralAssociation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralAssociation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralAssociation, peripheral_id_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralAssociation, peripheral_type_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralAssociation, client_id_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralAssociation, link_peripheral_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::organicdump_proto::Echo)},
  { 7, 14, sizeof(::organicdump_proto::Hello)},
  { 16, 24, sizeof(::organicdump_proto::BasicResponse)},
  { 27, 35, sizeof(::organicdump_proto::RegisterClient)},
  { 38, 45, sizeof(::organicdump_proto::RegisterSoilMoistureSensor)},
  { 47, 56, sizeof(::organicdump_proto::UpdatePeripheralAssociation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_Echo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_Hello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_BasicResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_RegisterClient_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_RegisterSoilMoistureSensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_UpdatePeripheralAssociation_default_instance_),
};

const char descriptor_table_protodef_organic_5fdump_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022organic_dump.proto\022\021organicdump_proto\""
  "\027\n\004Echo\022\017\n\007message\030\001 \002(\t\"G\n\005Hello\022+\n\004typ"
  "e\030\001 \002(\0162\035.organicdump_proto.ClientType\022\021"
  "\n\tclient_id\030\002 \002(\005\"X\n\rBasicResponse\022*\n\004co"
  "de\030\001 \002(\0162\034.organicdump_proto.ErrorCode\022\017"
  "\n\007message\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\"d\n\016RegisterC"
  "lient\022+\n\004type\030\001 \002(\0162\035.organicdump_proto."
  "ClientType\022\023\n\013client_name\030\002 \002(\t\022\020\n\010locat"
  "ion\030\003 \002(\t\"9\n\032RegisterSoilMoistureSensor\022"
  "\r\n\005floor\030\001 \002(\001\022\014\n\004ceil\030\002 \002(\001\"\234\001\n\033UpdateP"
  "eripheralAssociation\022\025\n\rperipheral_id\030\001 "
  "\002(\005\022:\n\017peripheral_type\030\002 \002(\0162!.organicdu"
  "mp_proto.PeripheralType\022\021\n\tclient_id\030\003 \002"
  "(\005\022\027\n\017link_peripheral\030\004 \002(\010*\253\001\n\013MessageT"
  "ype\022\017\n\013SERVER_ECHO\020\000\022\t\n\005HELLO\020\001\022\023\n\017REGIS"
  "TER_CLIENT\020\002\022!\n\035REGISTER_SOIL_MOISTURE_S"
  "ENSOR\020\003\022!\n\035UPDATE_PERIPHERAL_ASSOCIATION"
  "\020\004\022\020\n\013CLIENT_ECHO\020\200\001\022\023\n\016BASIC_RESPONSE\020\201"
  "\001*&\n\nClientType\022\013\n\007CONTROL\020\000\022\013\n\007RPI_POT\020"
  "\001*u\n\016PeripheralType\022\030\n\024SOIL_MOISTURE_SEN"
  "SOR\020\000\022\021\n\rCAMERA_SENSOR\020\001\022\016\n\nLUX_SENSOR\020\002"
  "\022\016\n\nPIR_SENSOR\020\003\022\026\n\022TEMPERATURE_SENSOR\020\004"
  "*<\n\tErrorCode\022\006\n\002OK\020\000\022\020\n\014UNAUTHOROZED\020\001\022"
  "\025\n\021INVALID_PARAMETER\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_organic_5fdump_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_organic_5fdump_2eproto_sccs[6] = {
  &scc_info_BasicResponse_organic_5fdump_2eproto.base,
  &scc_info_Echo_organic_5fdump_2eproto.base,
  &scc_info_Hello_organic_5fdump_2eproto.base,
  &scc_info_RegisterClient_organic_5fdump_2eproto.base,
  &scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto.base,
  &scc_info_UpdatePeripheralAssociation_organic_5fdump_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_organic_5fdump_2eproto_once;
static bool descriptor_table_organic_5fdump_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_organic_5fdump_2eproto = {
  &descriptor_table_organic_5fdump_2eproto_initialized, descriptor_table_protodef_organic_5fdump_2eproto, "organic_dump.proto", 942,
  &descriptor_table_organic_5fdump_2eproto_once, descriptor_table_organic_5fdump_2eproto_sccs, descriptor_table_organic_5fdump_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_organic_5fdump_2eproto::offsets,
  file_level_metadata_organic_5fdump_2eproto, 6, file_level_enum_descriptors_organic_5fdump_2eproto, file_level_service_descriptors_organic_5fdump_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_organic_5fdump_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_organic_5fdump_2eproto), true);
namespace organicdump_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 128:
    case 129:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[1];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeripheralType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[2];
}
bool PeripheralType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[3];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Echo::InitAsDefaultInstance() {
}
class Echo::_Internal {
 public:
  using HasBits = decltype(std::declval<Echo>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Echo::Echo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.Echo)
}
Echo::Echo(const Echo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.Echo)
}

void Echo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Echo_organic_5fdump_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Echo::~Echo() {
  // @@protoc_insertion_point(destructor:organicdump_proto.Echo)
  SharedDtor();
}

void Echo::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Echo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Echo& Echo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Echo_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void Echo::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.Echo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Echo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_message(), ptr, ctx, "organicdump_proto.Echo.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Echo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.Echo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.Echo.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.Echo)
  return target;
}

size_t Echo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.Echo)
  size_t total_size = 0;

  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Echo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.Echo)
  GOOGLE_DCHECK_NE(&from, this);
  const Echo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Echo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.Echo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.Echo)
    MergeFrom(*source);
  }
}

void Echo::MergeFrom(const Echo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.Echo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Echo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.Echo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Echo::CopyFrom(const Echo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.Echo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Echo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Echo::InternalSwap(Echo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Echo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hello::InitAsDefaultInstance() {
}
class Hello::_Internal {
 public:
  using HasBits = decltype(std::declval<Hello>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Hello::Hello()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.Hello)
}
Hello::Hello(const Hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.Hello)
}

void Hello::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(client_id_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:organicdump_proto.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
}

void Hello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hello& Hello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hello_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(client_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .organicdump_proto.ClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::organicdump_proto::ClientType_IsValid(val))) {
            _internal_set_type(static_cast<::organicdump_proto::ClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hello::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .organicdump_proto.ClientType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required int32 client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.Hello)
  return target;
}

size_t Hello::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.Hello)
  size_t total_size = 0;

  if (has_type()) {
    // required .organicdump_proto.ClientType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (has_client_id()) {
    // required int32 client_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  return total_size;
}
size_t Hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.Hello)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .organicdump_proto.ClientType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required int32 client_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  const Hello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.Hello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.Hello)
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Hello::InternalSwap(Hello* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicResponse::InitAsDefaultInstance() {
}
class BasicResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BasicResponse::BasicResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.BasicResponse)
}
BasicResponse::BasicResponse(const BasicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.BasicResponse)
}

void BasicResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicResponse_organic_5fdump_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&code_)) + sizeof(id_));
}

BasicResponse::~BasicResponse() {
  // @@protoc_insertion_point(destructor:organicdump_proto.BasicResponse)
  SharedDtor();
}

void BasicResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicResponse& BasicResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicResponse_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void BasicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.BasicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&code_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BasicResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .organicdump_proto.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::organicdump_proto::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::organicdump_proto::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_message(), ptr, ctx, "organicdump_proto.BasicResponse.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.BasicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .organicdump_proto.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.BasicResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.BasicResponse)
  return target;
}

size_t BasicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.BasicResponse)
  size_t total_size = 0;

  // required .organicdump_proto.ErrorCode code = 1;
  if (has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.BasicResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.BasicResponse)
    MergeFrom(*source);
  }
}

void BasicResponse::MergeFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BasicResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicResponse::CopyFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void BasicResponse::InternalSwap(BasicResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterClient::InitAsDefaultInstance() {
}
class RegisterClient::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterClient>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_client_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RegisterClient::RegisterClient()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.RegisterClient)
}
RegisterClient::RegisterClient(const RegisterClient& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_client_name()) {
    client_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_name_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.RegisterClient)
}

void RegisterClient::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterClient_organic_5fdump_2eproto.base);
  client_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

RegisterClient::~RegisterClient() {
  // @@protoc_insertion_point(destructor:organicdump_proto.RegisterClient)
  SharedDtor();
}

void RegisterClient::SharedDtor() {
  client_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterClient& RegisterClient::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterClient_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void RegisterClient::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.RegisterClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegisterClient::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .organicdump_proto.ClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::organicdump_proto::ClientType_IsValid(val))) {
            _internal_set_type(static_cast<::organicdump_proto::ClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string client_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_client_name(), ptr, ctx, "organicdump_proto.RegisterClient.client_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_location(), ptr, ctx, "organicdump_proto.RegisterClient.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterClient::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.RegisterClient)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .organicdump_proto.ClientType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required string client_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_client_name().data(), static_cast<int>(this->_internal_client_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.RegisterClient.client_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_client_name(), target);
  }

  // required string location = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.RegisterClient.location");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.RegisterClient)
  return target;
}

size_t RegisterClient::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.RegisterClient)
  size_t total_size = 0;

  if (has_client_name()) {
    // required string client_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());
  }

  if (has_location()) {
    // required string location = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  if (has_type()) {
    // required .organicdump_proto.ClientType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return total_size;
}
size_t RegisterClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.RegisterClient)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string client_name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_name());

    // required string location = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());

    // required .organicdump_proto.ClientType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterClient::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.RegisterClient)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterClient* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.RegisterClient)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.RegisterClient)
    MergeFrom(*source);
  }
}

void RegisterClient::MergeFrom(const RegisterClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.RegisterClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      client_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterClient::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.RegisterClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterClient::CopyFrom(const RegisterClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.RegisterClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterClient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void RegisterClient::InternalSwap(RegisterClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  client_name_.Swap(&other->client_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterClient::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterSoilMoistureSensor::InitAsDefaultInstance() {
}
class RegisterSoilMoistureSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterSoilMoistureSensor>()._has_bits_);
  static void set_has_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ceil(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RegisterSoilMoistureSensor::RegisterSoilMoistureSensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.RegisterSoilMoistureSensor)
}
RegisterSoilMoistureSensor::RegisterSoilMoistureSensor(const RegisterSoilMoistureSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&floor_, &from.floor_,
    static_cast<size_t>(reinterpret_cast<char*>(&ceil_) -
    reinterpret_cast<char*>(&floor_)) + sizeof(ceil_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.RegisterSoilMoistureSensor)
}

void RegisterSoilMoistureSensor::SharedCtor() {
  ::memset(&floor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ceil_) -
      reinterpret_cast<char*>(&floor_)) + sizeof(ceil_));
}

RegisterSoilMoistureSensor::~RegisterSoilMoistureSensor() {
  // @@protoc_insertion_point(destructor:organicdump_proto.RegisterSoilMoistureSensor)
  SharedDtor();
}

void RegisterSoilMoistureSensor::SharedDtor() {
}

void RegisterSoilMoistureSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterSoilMoistureSensor& RegisterSoilMoistureSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void RegisterSoilMoistureSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.RegisterSoilMoistureSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&floor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ceil_) -
        reinterpret_cast<char*>(&floor_)) + sizeof(ceil_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegisterSoilMoistureSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double floor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_floor(&has_bits);
          floor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ceil = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ceil(&has_bits);
          ceil_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterSoilMoistureSensor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.RegisterSoilMoistureSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double floor = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_floor(), target);
  }

  // required double ceil = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ceil(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.RegisterSoilMoistureSensor)
  return target;
}

size_t RegisterSoilMoistureSensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.RegisterSoilMoistureSensor)
  size_t total_size = 0;

  if (has_floor()) {
    // required double floor = 1;
    total_size += 1 + 8;
  }

  if (has_ceil()) {
    // required double ceil = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t RegisterSoilMoistureSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.RegisterSoilMoistureSensor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double floor = 1;
    total_size += 1 + 8;

    // required double ceil = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterSoilMoistureSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterSoilMoistureSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterSoilMoistureSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.RegisterSoilMoistureSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.RegisterSoilMoistureSensor)
    MergeFrom(*source);
  }
}

void RegisterSoilMoistureSensor::MergeFrom(const RegisterSoilMoistureSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      floor_ = from.floor_;
    }
    if (cached_has_bits & 0x00000002u) {
      ceil_ = from.ceil_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterSoilMoistureSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterSoilMoistureSensor::CopyFrom(const RegisterSoilMoistureSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterSoilMoistureSensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RegisterSoilMoistureSensor::InternalSwap(RegisterSoilMoistureSensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(floor_, other->floor_);
  swap(ceil_, other->ceil_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterSoilMoistureSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeripheralAssociation::InitAsDefaultInstance() {
}
class UpdatePeripheralAssociation::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePeripheralAssociation>()._has_bits_);
  static void set_has_peripheral_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_peripheral_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_link_peripheral(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UpdatePeripheralAssociation::UpdatePeripheralAssociation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.UpdatePeripheralAssociation)
}
UpdatePeripheralAssociation::UpdatePeripheralAssociation(const UpdatePeripheralAssociation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&peripheral_id_, &from.peripheral_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&link_peripheral_) -
    reinterpret_cast<char*>(&peripheral_id_)) + sizeof(link_peripheral_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.UpdatePeripheralAssociation)
}

void UpdatePeripheralAssociation::SharedCtor() {
  ::memset(&peripheral_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&link_peripheral_) -
      reinterpret_cast<char*>(&peripheral_id_)) + sizeof(link_peripheral_));
}

UpdatePeripheralAssociation::~UpdatePeripheralAssociation() {
  // @@protoc_insertion_point(destructor:organicdump_proto.UpdatePeripheralAssociation)
  SharedDtor();
}

void UpdatePeripheralAssociation::SharedDtor() {
}

void UpdatePeripheralAssociation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeripheralAssociation& UpdatePeripheralAssociation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeripheralAssociation_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeripheralAssociation::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.UpdatePeripheralAssociation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&peripheral_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&link_peripheral_) -
        reinterpret_cast<char*>(&peripheral_id_)) + sizeof(link_peripheral_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdatePeripheralAssociation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 peripheral_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_peripheral_id(&has_bits);
          peripheral_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .organicdump_proto.PeripheralType peripheral_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::organicdump_proto::PeripheralType_IsValid(val))) {
            _internal_set_peripheral_type(static_cast<::organicdump_proto::PeripheralType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 client_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool link_peripheral = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_link_peripheral(&has_bits);
          link_peripheral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeripheralAssociation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.UpdatePeripheralAssociation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 peripheral_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_peripheral_id(), target);
  }

  // required .organicdump_proto.PeripheralType peripheral_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_peripheral_type(), target);
  }

  // required int32 client_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_client_id(), target);
  }

  // required bool link_peripheral = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_link_peripheral(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.UpdatePeripheralAssociation)
  return target;
}

size_t UpdatePeripheralAssociation::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.UpdatePeripheralAssociation)
  size_t total_size = 0;

  if (has_peripheral_id()) {
    // required int32 peripheral_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peripheral_id());
  }

  if (has_peripheral_type()) {
    // required .organicdump_proto.PeripheralType peripheral_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_peripheral_type());
  }

  if (has_client_id()) {
    // required int32 client_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  if (has_link_peripheral()) {
    // required bool link_peripheral = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UpdatePeripheralAssociation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.UpdatePeripheralAssociation)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 peripheral_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peripheral_id());

    // required .organicdump_proto.PeripheralType peripheral_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_peripheral_type());

    // required int32 client_id = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());

    // required bool link_peripheral = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeripheralAssociation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.UpdatePeripheralAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeripheralAssociation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeripheralAssociation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.UpdatePeripheralAssociation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.UpdatePeripheralAssociation)
    MergeFrom(*source);
  }
}

void UpdatePeripheralAssociation::MergeFrom(const UpdatePeripheralAssociation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.UpdatePeripheralAssociation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      peripheral_id_ = from.peripheral_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      peripheral_type_ = from.peripheral_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_id_ = from.client_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      link_peripheral_ = from.link_peripheral_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdatePeripheralAssociation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.UpdatePeripheralAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeripheralAssociation::CopyFrom(const UpdatePeripheralAssociation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.UpdatePeripheralAssociation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeripheralAssociation::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void UpdatePeripheralAssociation::InternalSwap(UpdatePeripheralAssociation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(peripheral_id_, other->peripheral_id_);
  swap(peripheral_type_, other->peripheral_type_);
  swap(client_id_, other->client_id_);
  swap(link_peripheral_, other->link_peripheral_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeripheralAssociation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace organicdump_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::organicdump_proto::Echo* Arena::CreateMaybeMessage< ::organicdump_proto::Echo >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::Echo >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::Hello* Arena::CreateMaybeMessage< ::organicdump_proto::Hello >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::Hello >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::BasicResponse* Arena::CreateMaybeMessage< ::organicdump_proto::BasicResponse >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::BasicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::RegisterClient* Arena::CreateMaybeMessage< ::organicdump_proto::RegisterClient >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::RegisterClient >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::RegisterSoilMoistureSensor* Arena::CreateMaybeMessage< ::organicdump_proto::RegisterSoilMoistureSensor >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::RegisterSoilMoistureSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::UpdatePeripheralAssociation* Arena::CreateMaybeMessage< ::organicdump_proto::UpdatePeripheralAssociation >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::UpdatePeripheralAssociation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
