// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: organic_dump.proto

#include "organic_dump.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_organic_5fdump_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeripheralMeta_organic_5fdump_2eproto;
namespace organicdump_proto {
class EchoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Echo> _instance;
} _Echo_default_instance_;
class HelloDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Hello> _instance;
} _Hello_default_instance_;
class BasicResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BasicResponse> _instance;
} _BasicResponse_default_instance_;
class RegisterRpiDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterRpi> _instance;
} _RegisterRpi_default_instance_;
class PeripheralMetaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PeripheralMeta> _instance;
} _PeripheralMeta_default_instance_;
class RegisterSoilMoistureSensorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegisterSoilMoistureSensor> _instance;
} _RegisterSoilMoistureSensor_default_instance_;
class UpdatePeripheralOwnershipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdatePeripheralOwnership> _instance;
} _UpdatePeripheralOwnership_default_instance_;
class SendSoilMoistureMeasurementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendSoilMoistureMeasurement> _instance;
} _SendSoilMoistureMeasurement_default_instance_;
}  // namespace organicdump_proto
static void InitDefaultsscc_info_BasicResponse_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_BasicResponse_default_instance_;
    new (ptr) ::organicdump_proto::BasicResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::BasicResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BasicResponse_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BasicResponse_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_Echo_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_Echo_default_instance_;
    new (ptr) ::organicdump_proto::Echo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::Echo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Echo_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Echo_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_Hello_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_Hello_default_instance_;
    new (ptr) ::organicdump_proto::Hello();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::Hello::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Hello_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Hello_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_PeripheralMeta_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_PeripheralMeta_default_instance_;
    new (ptr) ::organicdump_proto::PeripheralMeta();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::PeripheralMeta::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PeripheralMeta_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PeripheralMeta_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_RegisterRpi_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_RegisterRpi_default_instance_;
    new (ptr) ::organicdump_proto::RegisterRpi();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::RegisterRpi::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegisterRpi_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegisterRpi_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_RegisterSoilMoistureSensor_default_instance_;
    new (ptr) ::organicdump_proto::RegisterSoilMoistureSensor();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::RegisterSoilMoistureSensor::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto}, {
      &scc_info_PeripheralMeta_organic_5fdump_2eproto.base,}};

static void InitDefaultsscc_info_SendSoilMoistureMeasurement_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_SendSoilMoistureMeasurement_default_instance_;
    new (ptr) ::organicdump_proto::SendSoilMoistureMeasurement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::SendSoilMoistureMeasurement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendSoilMoistureMeasurement_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendSoilMoistureMeasurement_organic_5fdump_2eproto}, {}};

static void InitDefaultsscc_info_UpdatePeripheralOwnership_organic_5fdump_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::organicdump_proto::_UpdatePeripheralOwnership_default_instance_;
    new (ptr) ::organicdump_proto::UpdatePeripheralOwnership();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::organicdump_proto::UpdatePeripheralOwnership::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpdatePeripheralOwnership_organic_5fdump_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpdatePeripheralOwnership_organic_5fdump_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_organic_5fdump_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_organic_5fdump_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_organic_5fdump_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_organic_5fdump_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Echo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Echo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Echo, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, type_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::Hello, client_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, code_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, message_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::BasicResponse, id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterRpi, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterRpi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterRpi, name_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterRpi, location_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::PeripheralMeta, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::PeripheralMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::PeripheralMeta, name_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::PeripheralMeta, location_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::PeripheralMeta, rpi_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, meta_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, floor_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::RegisterSoilMoistureSensor, ceil_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralOwnership, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralOwnership, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralOwnership, peripheral_id_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralOwnership, rpi_id_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::UpdatePeripheralOwnership, orphan_peripheral_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::SendSoilMoistureMeasurement, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::SendSoilMoistureMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::SendSoilMoistureMeasurement, sensor_id_),
  PROTOBUF_FIELD_OFFSET(::organicdump_proto::SendSoilMoistureMeasurement, value_),
  0,
  1,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::organicdump_proto::Echo)},
  { 7, 14, sizeof(::organicdump_proto::Hello)},
  { 16, 24, sizeof(::organicdump_proto::BasicResponse)},
  { 27, 34, sizeof(::organicdump_proto::RegisterRpi)},
  { 36, 44, sizeof(::organicdump_proto::PeripheralMeta)},
  { 47, 55, sizeof(::organicdump_proto::RegisterSoilMoistureSensor)},
  { 58, 66, sizeof(::organicdump_proto::UpdatePeripheralOwnership)},
  { 69, 76, sizeof(::organicdump_proto::SendSoilMoistureMeasurement)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_Echo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_Hello_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_BasicResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_RegisterRpi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_PeripheralMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_RegisterSoilMoistureSensor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_UpdatePeripheralOwnership_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::organicdump_proto::_SendSoilMoistureMeasurement_default_instance_),
};

const char descriptor_table_protodef_organic_5fdump_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022organic_dump.proto\022\021organicdump_proto\""
  "\027\n\004Echo\022\017\n\007message\030\001 \002(\t\"G\n\005Hello\022+\n\004typ"
  "e\030\001 \002(\0162\035.organicdump_proto.ClientType\022\021"
  "\n\tclient_id\030\002 \001(\005\"X\n\rBasicResponse\022*\n\004co"
  "de\030\001 \002(\0162\034.organicdump_proto.ErrorCode\022\017"
  "\n\007message\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\"-\n\013RegisterR"
  "pi\022\014\n\004name\030\001 \002(\t\022\020\n\010location\030\002 \002(\t\"@\n\016Pe"
  "ripheralMeta\022\014\n\004name\030\001 \002(\t\022\020\n\010location\030\002"
  " \002(\t\022\016\n\006rpi_id\030\003 \001(\005\"j\n\032RegisterSoilMois"
  "tureSensor\022/\n\004meta\030\001 \002(\0132!.organicdump_p"
  "roto.PeripheralMeta\022\r\n\005floor\030\002 \002(\001\022\014\n\004ce"
  "il\030\003 \002(\001\"]\n\031UpdatePeripheralOwnership\022\025\n"
  "\rperipheral_id\030\001 \002(\005\022\016\n\006rpi_id\030\002 \002(\005\022\031\n\021"
  "orphan_peripheral\030\003 \002(\010\"\?\n\033SendSoilMoist"
  "ureMeasurement\022\021\n\tsensor_id\030\001 \002(\005\022\r\n\005val"
  "ue\030\002 \002(\002*\246\001\n\013MessageType\022\017\n\013SERVER_ECHO\020"
  "\000\022\t\n\005HELLO\020\001\022\020\n\014REGISTER_RPI\020\002\022!\n\035REGIST"
  "ER_SOIL_MOISTURE_SENSOR\020\003\022\037\n\033UPDATE_PERI"
  "PHERAL_OWNERSHIP\020\004\022\020\n\013CLIENT_ECHO\020\200\001\022\023\n\016"
  "BASIC_RESPONSE\020\201\001*3\n\nClientType\022\013\n\007UNKNO"
  "WN\020\000\022\013\n\007CONTROL\020\001\022\013\n\007RPI_POT\020\002*u\n\016Periph"
  "eralType\022\030\n\024SOIL_MOISTURE_SENSOR\020\000\022\021\n\rCA"
  "MERA_SENSOR\020\001\022\016\n\nLUX_SENSOR\020\002\022\016\n\nPIR_SEN"
  "SOR\020\003\022\026\n\022TEMPERATURE_SENSOR\020\004*W\n\tErrorCo"
  "de\022\006\n\002OK\020\000\022\020\n\014UNAUTHOROZED\020\001\022\025\n\021INVALID_"
  "PARAMETER\020\002\022\031\n\025INTERNAL_SERVER_ERROR\020\003"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_organic_5fdump_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_organic_5fdump_2eproto_sccs[8] = {
  &scc_info_BasicResponse_organic_5fdump_2eproto.base,
  &scc_info_Echo_organic_5fdump_2eproto.base,
  &scc_info_Hello_organic_5fdump_2eproto.base,
  &scc_info_PeripheralMeta_organic_5fdump_2eproto.base,
  &scc_info_RegisterRpi_organic_5fdump_2eproto.base,
  &scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto.base,
  &scc_info_SendSoilMoistureMeasurement_organic_5fdump_2eproto.base,
  &scc_info_UpdatePeripheralOwnership_organic_5fdump_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_organic_5fdump_2eproto_once;
static bool descriptor_table_organic_5fdump_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_organic_5fdump_2eproto = {
  &descriptor_table_organic_5fdump_2eproto_initialized, descriptor_table_protodef_organic_5fdump_2eproto, "organic_dump.proto", 1038,
  &descriptor_table_organic_5fdump_2eproto_once, descriptor_table_organic_5fdump_2eproto_sccs, descriptor_table_organic_5fdump_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_organic_5fdump_2eproto::offsets,
  file_level_metadata_organic_5fdump_2eproto, 8, file_level_enum_descriptors_organic_5fdump_2eproto, file_level_service_descriptors_organic_5fdump_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_organic_5fdump_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_organic_5fdump_2eproto), true);
namespace organicdump_proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[0];
}
bool MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 128:
    case 129:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ClientType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[1];
}
bool ClientType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PeripheralType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[2];
}
bool PeripheralType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_organic_5fdump_2eproto);
  return file_level_enum_descriptors_organic_5fdump_2eproto[3];
}
bool ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Echo::InitAsDefaultInstance() {
}
class Echo::_Internal {
 public:
  using HasBits = decltype(std::declval<Echo>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Echo::Echo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.Echo)
}
Echo::Echo(const Echo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.Echo)
}

void Echo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Echo_organic_5fdump_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Echo::~Echo() {
  // @@protoc_insertion_point(destructor:organicdump_proto.Echo)
  SharedDtor();
}

void Echo::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Echo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Echo& Echo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Echo_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void Echo::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.Echo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Echo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_message(), ptr, ctx, "organicdump_proto.Echo.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Echo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.Echo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.Echo.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.Echo)
  return target;
}

size_t Echo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.Echo)
  size_t total_size = 0;

  // required string message = 1;
  if (has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Echo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.Echo)
  GOOGLE_DCHECK_NE(&from, this);
  const Echo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Echo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.Echo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.Echo)
    MergeFrom(*source);
  }
}

void Echo::MergeFrom(const Echo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.Echo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void Echo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.Echo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Echo::CopyFrom(const Echo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.Echo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Echo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Echo::InternalSwap(Echo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Echo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Hello::InitAsDefaultInstance() {
}
class Hello::_Internal {
 public:
  using HasBits = decltype(std::declval<Hello>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_client_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Hello::Hello()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.Hello)
}
Hello::Hello(const Hello& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_id_) -
    reinterpret_cast<char*>(&type_)) + sizeof(client_id_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.Hello)
}

void Hello::SharedCtor() {
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_id_) -
      reinterpret_cast<char*>(&type_)) + sizeof(client_id_));
}

Hello::~Hello() {
  // @@protoc_insertion_point(destructor:organicdump_proto.Hello)
  SharedDtor();
}

void Hello::SharedDtor() {
}

void Hello::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Hello& Hello::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Hello_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void Hello::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_id_) -
        reinterpret_cast<char*>(&type_)) + sizeof(client_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* Hello::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .organicdump_proto.ClientType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::organicdump_proto::ClientType_IsValid(val))) {
            _internal_set_type(static_cast<::organicdump_proto::ClientType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional int32 client_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_client_id(&has_bits);
          client_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hello::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.Hello)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .organicdump_proto.ClientType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional int32 client_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_client_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.Hello)
  return target;
}

size_t Hello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.Hello)
  size_t total_size = 0;

  // required .organicdump_proto.ClientType type = 1;
  if (has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 client_id = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hello::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  const Hello* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hello>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.Hello)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.Hello)
    MergeFrom(*source);
  }
}

void Hello::MergeFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.Hello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_id_ = from.client_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Hello::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hello::CopyFrom(const Hello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.Hello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hello::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void Hello::InternalSwap(Hello* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(type_, other->type_);
  swap(client_id_, other->client_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Hello::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BasicResponse::InitAsDefaultInstance() {
}
class BasicResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BasicResponse>()._has_bits_);
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

BasicResponse::BasicResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.BasicResponse)
}
BasicResponse::BasicResponse(const BasicResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&code_, &from.code_,
    static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&code_)) + sizeof(id_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.BasicResponse)
}

void BasicResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BasicResponse_organic_5fdump_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&code_)) + sizeof(id_));
}

BasicResponse::~BasicResponse() {
  // @@protoc_insertion_point(destructor:organicdump_proto.BasicResponse)
  SharedDtor();
}

void BasicResponse::SharedDtor() {
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BasicResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BasicResponse& BasicResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BasicResponse_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void BasicResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.BasicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&code_)) + sizeof(id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* BasicResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .organicdump_proto.ErrorCode code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::organicdump_proto::ErrorCode_IsValid(val))) {
            _internal_set_code(static_cast<::organicdump_proto::ErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_message(), ptr, ctx, "organicdump_proto.BasicResponse.message");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BasicResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.BasicResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .organicdump_proto.ErrorCode code = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.BasicResponse.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.BasicResponse)
  return target;
}

size_t BasicResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.BasicResponse)
  size_t total_size = 0;

  // required .organicdump_proto.ErrorCode code = 1;
  if (has_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // optional int32 id = 3;
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BasicResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const BasicResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BasicResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.BasicResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.BasicResponse)
    MergeFrom(*source);
  }
}

void BasicResponse::MergeFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.BasicResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      code_ = from.code_;
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BasicResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BasicResponse::CopyFrom(const BasicResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.BasicResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BasicResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  return true;
}

void BasicResponse::InternalSwap(BasicResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BasicResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterRpi::InitAsDefaultInstance() {
}
class RegisterRpi::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterRpi>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

RegisterRpi::RegisterRpi()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.RegisterRpi)
}
RegisterRpi::RegisterRpi(const RegisterRpi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.RegisterRpi)
}

void RegisterRpi::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterRpi_organic_5fdump_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

RegisterRpi::~RegisterRpi() {
  // @@protoc_insertion_point(destructor:organicdump_proto.RegisterRpi)
  SharedDtor();
}

void RegisterRpi::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RegisterRpi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterRpi& RegisterRpi::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterRpi_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void RegisterRpi::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.RegisterRpi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegisterRpi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_name(), ptr, ctx, "organicdump_proto.RegisterRpi.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_location(), ptr, ctx, "organicdump_proto.RegisterRpi.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterRpi::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.RegisterRpi)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.RegisterRpi.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string location = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.RegisterRpi.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.RegisterRpi)
  return target;
}

size_t RegisterRpi::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.RegisterRpi)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (has_location()) {
    // required string location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  return total_size;
}
size_t RegisterRpi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.RegisterRpi)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterRpi::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.RegisterRpi)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterRpi* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterRpi>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.RegisterRpi)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.RegisterRpi)
    MergeFrom(*source);
  }
}

void RegisterRpi::MergeFrom(const RegisterRpi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.RegisterRpi)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
  }
}

void RegisterRpi::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.RegisterRpi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterRpi::CopyFrom(const RegisterRpi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.RegisterRpi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterRpi::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RegisterRpi::InternalSwap(RegisterRpi* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterRpi::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PeripheralMeta::InitAsDefaultInstance() {
}
class PeripheralMeta::_Internal {
 public:
  using HasBits = decltype(std::declval<PeripheralMeta>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_rpi_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PeripheralMeta::PeripheralMeta()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.PeripheralMeta)
}
PeripheralMeta::PeripheralMeta(const PeripheralMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_location()) {
    location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  rpi_id_ = from.rpi_id_;
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.PeripheralMeta)
}

void PeripheralMeta::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PeripheralMeta_organic_5fdump_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rpi_id_ = 0;
}

PeripheralMeta::~PeripheralMeta() {
  // @@protoc_insertion_point(destructor:organicdump_proto.PeripheralMeta)
  SharedDtor();
}

void PeripheralMeta::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  location_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PeripheralMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PeripheralMeta& PeripheralMeta::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PeripheralMeta_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void PeripheralMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.PeripheralMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      location_.ClearNonDefaultToEmptyNoArena();
    }
  }
  rpi_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* PeripheralMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_name(), ptr, ctx, "organicdump_proto.PeripheralMeta.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_location(), ptr, ctx, "organicdump_proto.PeripheralMeta.location");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 rpi_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_rpi_id(&has_bits);
          rpi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PeripheralMeta::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.PeripheralMeta)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.PeripheralMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string location = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_location().data(), static_cast<int>(this->_internal_location().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "organicdump_proto.PeripheralMeta.location");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_location(), target);
  }

  // optional int32 rpi_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_rpi_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.PeripheralMeta)
  return target;
}

size_t PeripheralMeta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.PeripheralMeta)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (has_location()) {
    // required string location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());
  }

  return total_size;
}
size_t PeripheralMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.PeripheralMeta)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string location = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_location());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 rpi_id = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000004u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpi_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PeripheralMeta::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.PeripheralMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PeripheralMeta* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PeripheralMeta>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.PeripheralMeta)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.PeripheralMeta)
    MergeFrom(*source);
  }
}

void PeripheralMeta::MergeFrom(const PeripheralMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.PeripheralMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      location_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.location_);
    }
    if (cached_has_bits & 0x00000004u) {
      rpi_id_ = from.rpi_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PeripheralMeta::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.PeripheralMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PeripheralMeta::CopyFrom(const PeripheralMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.PeripheralMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeripheralMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void PeripheralMeta::InternalSwap(PeripheralMeta* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  location_.Swap(&other->location_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(rpi_id_, other->rpi_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PeripheralMeta::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegisterSoilMoistureSensor::InitAsDefaultInstance() {
  ::organicdump_proto::_RegisterSoilMoistureSensor_default_instance_._instance.get_mutable()->meta_ = const_cast< ::organicdump_proto::PeripheralMeta*>(
      ::organicdump_proto::PeripheralMeta::internal_default_instance());
}
class RegisterSoilMoistureSensor::_Internal {
 public:
  using HasBits = decltype(std::declval<RegisterSoilMoistureSensor>()._has_bits_);
  static const ::organicdump_proto::PeripheralMeta& meta(const RegisterSoilMoistureSensor* msg);
  static void set_has_meta(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_floor(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ceil(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::organicdump_proto::PeripheralMeta&
RegisterSoilMoistureSensor::_Internal::meta(const RegisterSoilMoistureSensor* msg) {
  return *msg->meta_;
}
RegisterSoilMoistureSensor::RegisterSoilMoistureSensor()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.RegisterSoilMoistureSensor)
}
RegisterSoilMoistureSensor::RegisterSoilMoistureSensor(const RegisterSoilMoistureSensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_meta()) {
    meta_ = new ::organicdump_proto::PeripheralMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  ::memcpy(&floor_, &from.floor_,
    static_cast<size_t>(reinterpret_cast<char*>(&ceil_) -
    reinterpret_cast<char*>(&floor_)) + sizeof(ceil_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.RegisterSoilMoistureSensor)
}

void RegisterSoilMoistureSensor::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto.base);
  ::memset(&meta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ceil_) -
      reinterpret_cast<char*>(&meta_)) + sizeof(ceil_));
}

RegisterSoilMoistureSensor::~RegisterSoilMoistureSensor() {
  // @@protoc_insertion_point(destructor:organicdump_proto.RegisterSoilMoistureSensor)
  SharedDtor();
}

void RegisterSoilMoistureSensor::SharedDtor() {
  if (this != internal_default_instance()) delete meta_;
}

void RegisterSoilMoistureSensor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegisterSoilMoistureSensor& RegisterSoilMoistureSensor::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegisterSoilMoistureSensor_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void RegisterSoilMoistureSensor::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.RegisterSoilMoistureSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(meta_ != nullptr);
    meta_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&floor_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ceil_) -
        reinterpret_cast<char*>(&floor_)) + sizeof(ceil_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* RegisterSoilMoistureSensor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .organicdump_proto.PeripheralMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double floor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_floor(&has_bits);
          floor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ceil = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_ceil(&has_bits);
          ceil_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegisterSoilMoistureSensor::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.RegisterSoilMoistureSensor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .organicdump_proto.PeripheralMeta meta = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::meta(this), target, stream);
  }

  // required double floor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_floor(), target);
  }

  // required double ceil = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ceil(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.RegisterSoilMoistureSensor)
  return target;
}

size_t RegisterSoilMoistureSensor::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.RegisterSoilMoistureSensor)
  size_t total_size = 0;

  if (has_meta()) {
    // required .organicdump_proto.PeripheralMeta meta = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  if (has_floor()) {
    // required double floor = 2;
    total_size += 1 + 8;
  }

  if (has_ceil()) {
    // required double ceil = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t RegisterSoilMoistureSensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.RegisterSoilMoistureSensor)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .organicdump_proto.PeripheralMeta meta = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);

    // required double floor = 2;
    total_size += 1 + 8;

    // required double ceil = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegisterSoilMoistureSensor::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  GOOGLE_DCHECK_NE(&from, this);
  const RegisterSoilMoistureSensor* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegisterSoilMoistureSensor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.RegisterSoilMoistureSensor)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.RegisterSoilMoistureSensor)
    MergeFrom(*source);
  }
}

void RegisterSoilMoistureSensor::MergeFrom(const RegisterSoilMoistureSensor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_meta()->::organicdump_proto::PeripheralMeta::MergeFrom(from._internal_meta());
    }
    if (cached_has_bits & 0x00000002u) {
      floor_ = from.floor_;
    }
    if (cached_has_bits & 0x00000004u) {
      ceil_ = from.ceil_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RegisterSoilMoistureSensor::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterSoilMoistureSensor::CopyFrom(const RegisterSoilMoistureSensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.RegisterSoilMoistureSensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterSoilMoistureSensor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_meta()) {
    if (!this->meta_->IsInitialized()) return false;
  }
  return true;
}

void RegisterSoilMoistureSensor::InternalSwap(RegisterSoilMoistureSensor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(meta_, other->meta_);
  swap(floor_, other->floor_);
  swap(ceil_, other->ceil_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterSoilMoistureSensor::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdatePeripheralOwnership::InitAsDefaultInstance() {
}
class UpdatePeripheralOwnership::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdatePeripheralOwnership>()._has_bits_);
  static void set_has_peripheral_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_rpi_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_orphan_peripheral(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UpdatePeripheralOwnership::UpdatePeripheralOwnership()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.UpdatePeripheralOwnership)
}
UpdatePeripheralOwnership::UpdatePeripheralOwnership(const UpdatePeripheralOwnership& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&peripheral_id_, &from.peripheral_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&orphan_peripheral_) -
    reinterpret_cast<char*>(&peripheral_id_)) + sizeof(orphan_peripheral_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.UpdatePeripheralOwnership)
}

void UpdatePeripheralOwnership::SharedCtor() {
  ::memset(&peripheral_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&orphan_peripheral_) -
      reinterpret_cast<char*>(&peripheral_id_)) + sizeof(orphan_peripheral_));
}

UpdatePeripheralOwnership::~UpdatePeripheralOwnership() {
  // @@protoc_insertion_point(destructor:organicdump_proto.UpdatePeripheralOwnership)
  SharedDtor();
}

void UpdatePeripheralOwnership::SharedDtor() {
}

void UpdatePeripheralOwnership::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdatePeripheralOwnership& UpdatePeripheralOwnership::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdatePeripheralOwnership_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void UpdatePeripheralOwnership::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.UpdatePeripheralOwnership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&peripheral_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orphan_peripheral_) -
        reinterpret_cast<char*>(&peripheral_id_)) + sizeof(orphan_peripheral_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* UpdatePeripheralOwnership::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 peripheral_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_peripheral_id(&has_bits);
          peripheral_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 rpi_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_rpi_id(&has_bits);
          rpi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool orphan_peripheral = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_orphan_peripheral(&has_bits);
          orphan_peripheral_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdatePeripheralOwnership::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.UpdatePeripheralOwnership)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 peripheral_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_peripheral_id(), target);
  }

  // required int32 rpi_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_rpi_id(), target);
  }

  // required bool orphan_peripheral = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_orphan_peripheral(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.UpdatePeripheralOwnership)
  return target;
}

size_t UpdatePeripheralOwnership::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.UpdatePeripheralOwnership)
  size_t total_size = 0;

  if (has_peripheral_id()) {
    // required int32 peripheral_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peripheral_id());
  }

  if (has_rpi_id()) {
    // required int32 rpi_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpi_id());
  }

  if (has_orphan_peripheral()) {
    // required bool orphan_peripheral = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t UpdatePeripheralOwnership::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.UpdatePeripheralOwnership)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 peripheral_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_peripheral_id());

    // required int32 rpi_id = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rpi_id());

    // required bool orphan_peripheral = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdatePeripheralOwnership::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.UpdatePeripheralOwnership)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdatePeripheralOwnership* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdatePeripheralOwnership>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.UpdatePeripheralOwnership)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.UpdatePeripheralOwnership)
    MergeFrom(*source);
  }
}

void UpdatePeripheralOwnership::MergeFrom(const UpdatePeripheralOwnership& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.UpdatePeripheralOwnership)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      peripheral_id_ = from.peripheral_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      rpi_id_ = from.rpi_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      orphan_peripheral_ = from.orphan_peripheral_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpdatePeripheralOwnership::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.UpdatePeripheralOwnership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdatePeripheralOwnership::CopyFrom(const UpdatePeripheralOwnership& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.UpdatePeripheralOwnership)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdatePeripheralOwnership::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void UpdatePeripheralOwnership::InternalSwap(UpdatePeripheralOwnership* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(peripheral_id_, other->peripheral_id_);
  swap(rpi_id_, other->rpi_id_);
  swap(orphan_peripheral_, other->orphan_peripheral_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdatePeripheralOwnership::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendSoilMoistureMeasurement::InitAsDefaultInstance() {
}
class SendSoilMoistureMeasurement::_Internal {
 public:
  using HasBits = decltype(std::declval<SendSoilMoistureMeasurement>()._has_bits_);
  static void set_has_sensor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SendSoilMoistureMeasurement::SendSoilMoistureMeasurement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:organicdump_proto.SendSoilMoistureMeasurement)
}
SendSoilMoistureMeasurement::SendSoilMoistureMeasurement(const SendSoilMoistureMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sensor_id_, &from.sensor_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&sensor_id_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:organicdump_proto.SendSoilMoistureMeasurement)
}

void SendSoilMoistureMeasurement::SharedCtor() {
  ::memset(&sensor_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&sensor_id_)) + sizeof(value_));
}

SendSoilMoistureMeasurement::~SendSoilMoistureMeasurement() {
  // @@protoc_insertion_point(destructor:organicdump_proto.SendSoilMoistureMeasurement)
  SharedDtor();
}

void SendSoilMoistureMeasurement::SharedDtor() {
}

void SendSoilMoistureMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendSoilMoistureMeasurement& SendSoilMoistureMeasurement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendSoilMoistureMeasurement_organic_5fdump_2eproto.base);
  return *internal_default_instance();
}


void SendSoilMoistureMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:organicdump_proto.SendSoilMoistureMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&sensor_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&sensor_id_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* SendSoilMoistureMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 sensor_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_sensor_id(&has_bits);
          sensor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_value(&has_bits);
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendSoilMoistureMeasurement::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:organicdump_proto.SendSoilMoistureMeasurement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 sensor_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sensor_id(), target);
  }

  // required float value = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:organicdump_proto.SendSoilMoistureMeasurement)
  return target;
}

size_t SendSoilMoistureMeasurement::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:organicdump_proto.SendSoilMoistureMeasurement)
  size_t total_size = 0;

  if (has_sensor_id()) {
    // required int32 sensor_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sensor_id());
  }

  if (has_value()) {
    // required float value = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t SendSoilMoistureMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:organicdump_proto.SendSoilMoistureMeasurement)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 sensor_id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sensor_id());

    // required float value = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendSoilMoistureMeasurement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:organicdump_proto.SendSoilMoistureMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  const SendSoilMoistureMeasurement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendSoilMoistureMeasurement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:organicdump_proto.SendSoilMoistureMeasurement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:organicdump_proto.SendSoilMoistureMeasurement)
    MergeFrom(*source);
  }
}

void SendSoilMoistureMeasurement::MergeFrom(const SendSoilMoistureMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:organicdump_proto.SendSoilMoistureMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      sensor_id_ = from.sensor_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SendSoilMoistureMeasurement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:organicdump_proto.SendSoilMoistureMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendSoilMoistureMeasurement::CopyFrom(const SendSoilMoistureMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:organicdump_proto.SendSoilMoistureMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendSoilMoistureMeasurement::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void SendSoilMoistureMeasurement::InternalSwap(SendSoilMoistureMeasurement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sensor_id_, other->sensor_id_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendSoilMoistureMeasurement::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace organicdump_proto
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::organicdump_proto::Echo* Arena::CreateMaybeMessage< ::organicdump_proto::Echo >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::Echo >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::Hello* Arena::CreateMaybeMessage< ::organicdump_proto::Hello >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::Hello >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::BasicResponse* Arena::CreateMaybeMessage< ::organicdump_proto::BasicResponse >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::BasicResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::RegisterRpi* Arena::CreateMaybeMessage< ::organicdump_proto::RegisterRpi >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::RegisterRpi >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::PeripheralMeta* Arena::CreateMaybeMessage< ::organicdump_proto::PeripheralMeta >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::PeripheralMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::RegisterSoilMoistureSensor* Arena::CreateMaybeMessage< ::organicdump_proto::RegisterSoilMoistureSensor >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::RegisterSoilMoistureSensor >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::UpdatePeripheralOwnership* Arena::CreateMaybeMessage< ::organicdump_proto::UpdatePeripheralOwnership >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::UpdatePeripheralOwnership >(arena);
}
template<> PROTOBUF_NOINLINE ::organicdump_proto::SendSoilMoistureMeasurement* Arena::CreateMaybeMessage< ::organicdump_proto::SendSoilMoistureMeasurement >(Arena* arena) {
  return Arena::CreateInternal< ::organicdump_proto::SendSoilMoistureMeasurement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
